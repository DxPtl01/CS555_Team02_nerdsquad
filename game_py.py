# -*- coding: utf-8 -*-
"""game.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o_8IfCBWsXZD1ybg5NihwIAMxPCzUMNZ
"""

import os
!git clone https://github.com/ntasfi/PyGame-Learning-Environment.git
os.chdir('PyGame-Learning-Environment')
!pip install -e .
!pip install pygame
os.chdir('/content')

import sys
import pygame
from pygame.locals import *
from pygame import mixer
import random
from datetime import date
from gameSettings import *
import shelve # shelve is One of the standardLibrary to communicate with directory file.

# Initialization of pygame
pygame.init()

# Setting of clock for game
clock = pygame.time.Clock()

# Create the screen
screen = pygame.display.set_mode((SCREENWIDTH, SCREENHEIGHT))
pygame.display.set_caption(TITLE)

# Background Music
mixer.music.load('assets/audio/bgmusic.mp3')
mixer.music.play(-1)

# Intialize of Fonts variable
BigFont = pygame.font.SysFont("dejavusans", 100)
MedFont = pygame.font.SysFont("dejavusans", 50)
SmallFont = pygame.font.SysFont("dejavusans", 25)

# BackGround image   
BackGround = pygame.image.load("assets/sprites/BackGround.png").convert()
BackGround = pygame.transform.scale(BackGround, (SCREENWIDTH, SCREENHEIGHT))

# Players Image
BIRDIMAGE = pygame.image.load('assets/sprites/Bird.png')
PLANEIMAGE = pygame.image.load('assets/sprites/Plane01.png')
FISHIMAGE = pygame.image.load('assets/sprites/Fish01.png')
ASTRNTIMAGE = pygame.image.load('assets/sprites/astronaut01.png')

# To save and load User data
UserData = shelve.open("UserData")

#  Variables used in game
Is_Score = True
Ground = pygame.image.load('assets/sprites/base.png').convert_alpha()
Ground = pygame.transform.scale(Ground, (int(SCREENWIDTH), int(168)))
GroundX_Pos = 0

# Obstecle VAriables and settings
GreenPipe = pygame.image.load('assets/sprites/GreenPipe.png')
GreenPipe = pygame.transform.scale2x(GreenPipe)
GreenPipeList = []
PipeHeight = [400,450,500]



# Events
XUserEvent = pygame.USEREVENT + 1
pygame.time.set_timer(XUserEvent,225)
PipeEvent = pygame.USEREVENT
pygame.time.set_timer(PipeEvent,2500)
SCOREEVENT = pygame.USEREVENT + 2
pygame.time.set_timer(SCOREEVENT,100)

# audio
WingSound = pygame.mixer.Sound('assets/audio/wing.wav')
HitSound= pygame.mixer.Sound('assets/audio/hit.wav')
PointSound = pygame.mixer.Sound('assets/audio/point.wav')
GameoverSound = pygame.mixer.Sound('assets/audio/Gameover.wav')

# Player Variables and settings
class XUser:
    def __init__(self, img):
        self.UserX = pygame.transform.scale2x(pygame.image.load(img).convert_alpha())
        self.XFrames = [self.UserX, self.UserX, self.UserX]
        self.XSprites =  self.XFrames[PLAYER_INDEX]
        self.XRect = self.XSprites.get_rect(center = (100,325))
        self.dXUser = self.XFrames[PLAYER_INDEX]
        self.dXUserRect = self.dXUser.get_rect(center = (100,self.XRect.centery))

    def UserTransform(self, XSprites):
        XUserSprites = pygame.transform.rotozoom(XSprites, (PLAYER_MOVEMENT * -2) ,1)
        return XUserSprites

# wait function 
def KeyWait():
    waiting = True
    run = False
    while  waiting:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                UserData.close()
                pygame.quit()
                sys.exit(0)
            elif event.type == pygame.KEYUP:
                if event.key == pygame.K_SPACE:
                    USERNAME == "GuestUser"
                    USERCHOICE == "Bird"
                    THEMECHOICE == "DayBg"
                    waiting = False
                    run = True
                    while run:
                        MainGame(USERNAME, USERCHOICE, THEMECHOICE)
                elif event.key == pygame.K_RETURN:
                    waiting = False
                    GameMenu()
            
# Button Function - To creates Button
def Button(x_pos, y_pos, width, height, color, hover):
        mouse = pygame.mouse.get_pos()
        click = pygame.mouse.get_pressed(3)
        if x_pos + width > mouse[0] > x_pos and y_pos + height > mouse[1] > y_pos:
            pygame.draw.rect(screen, hover, (x_pos, y_pos, width, height))
            if click[0] == 1:
                return True
        else:
             pygame.draw.rect(screen, color, (x_pos, y_pos, width, height))

# Text Function
def DText(txt, x, y):
    dTxt = SmallFont.render(str(txt), True, NAVYBLUE)
    TxtRct = dTxt.get_rect(midtop = (x , y))
    screen.blit(dTxt, TxtRct)

def BuildGround():
	screen.blit(Ground,(GroundX_Pos,610))
	screen.blit(Ground,(GroundX_Pos + SCREENWIDTH,610))
 
def Coins():
    CoinPosition = random.choice(90,450,90)
    COINIMAGE = pygame.transform.scale2x(COINIMAGE)
    TopCoin = COINIMAGE.get_rect(midbottom = (SCREENWIDTH +220 ,PipePosition-350))
    BottomCoin = COINIMAGE.get_rect(midtop = (SCREENWIDTH +210 ,PipePosition))
    return TopCoin,BottomCoin

def BuildPipe():
	PipePosition = random.choice(PipeHeight)
	TopPipe = GreenPipe.get_rect(midbottom = (SCREENWIDTH +200 ,PipePosition-350))
	BottomPipe = GreenPipe.get_rect(midtop = (SCREENWIDTH +200 ,PipePosition))
	return TopPipe,BottomPipe

def PipeTransform(pipes):
    for p in pipes:
        if p.bottom < SCREENHEIGHT:
            TossPipe = pygame.transform.flip(GreenPipe, False, True)
            screen.blit(TossPipe, p)
        else:
            screen.blit(GreenPipe, p)

def PipesMotion(pipes):
	for p in pipes:
		p.centerx -= 4
	dPipesList = [p for p in pipes if p.right > -25 ]
	return dPipesList

def dCollision(pipes):
	global Is_Score
	for p in pipes:
		if UserRect.colliderect(p):
			HitSound.play()
			return False

	if UserRect.bottom >= 995 or UserRect.top <= -105:
		Is_Score = True
		return False

	return True

def PipeScore():
    global SCORE, Is_Score
    if GreenPipeList:
        for p in GreenPipeList:
            if p.centerx < 0:
                Is_Score = True
            elif 105 > p.centerx > 95 and Is_Score:
                SCORE += 1
                PointSound.play()
                Is_Score = False

def ScoreBoard(IsGame, score):
	if IsGame == 'MainGame':
		ScoreBlock = SmallFont.render(str(int(SCORE)),True, WHITE)
		ScoreRect = ScoreBlock.get_rect(topleft = (20,20))
		screen.blit(ScoreBlock,ScoreRect)
	elif IsGame == 'GameOver':
         HSCORE = UserData['HIGHSCORE']
         if int(score) > HSCORE:
            UserData['HIGHSCORE'] = score

# Welcome page on the screen 
def WelcomePage():
    TitleText = SmallFont.render("Flappy Animal", True, NAVYBLUE)
    today = date.today()
    todayText =  today.strftime("%A , %B  %D") 
    todayText = SmallFont.render(todayText, True, NAVYBLUE)
    if not UserData['HIGHSCORE']:
        UserData['HIGHSCORE'] = HIGH_SCORE
    HSCORE = UserData['HIGHSCORE']
    HIGHSCORE = SmallFont.render("HighestScore: " + str(HSCORE) ,True, NAVYBLUE)
   

    while True:
        screen.fill((105,213,238))
        screen.blit(BackGround, [0, 0])
        screen.blit(todayText, (5, 10))
        screen.blit(TitleText, ((SCREENWIDTH - TitleText.get_width()) / 2, 10))
        screen.blit(HIGHSCORE, (SCREENWIDTH -  150, 10)) 

        BackGround_rect = BackGround.get_rect()
        screen.blit(BackGround, (BackGround_rect.width, 0))

        DText('Space key to start as Guest User', SCREENWIDTH *  0.5, SCREENHEIGHT * 0.25)
        DText('Enter or Return key to choose settings', SCREENWIDTH *  0.5, SCREENHEIGHT * 0.375)
        DText('Use Space key to move', SCREENWIDTH *  0.5, SCREENHEIGHT * 0.5)

        pygame.display.flip()
        KeyWait()

